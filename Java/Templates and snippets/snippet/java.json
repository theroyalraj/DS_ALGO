{
	"StringBuilder sb": {
		"prefix": "sb",
		"body": [
			"StringBuilder sb=new StringBuilder();",
		]
	},
	"Template": {
		"prefix": "temp",
		"body": [
			"import java.util.*;",
			"import java.io.*;",
			"",
			"public class Main {",
			"",
			"    static PrintWriter out;",
			"    static FastReader fr;",
			"    // make it false if Multiple test case is not in the question",
			"    static boolean multipleTC = ${1:true};",
			"    static int TestCase = 1;",
			"",
			"    // for pre processing if needed",
			"    void pre() throws Exception {",
			"    }",
			"",
			"    public static void main(String[] args) throws Exception {",
			"",
			"        new Main().run();",
			"    }",
			"",
			"    // input output handled here",
			"    private Object solve() throws Exception {",
			"        ${2:// code}",
			"        ${3:}${6:}",
			"        return \"\";",
			"    }",
			"",
			"    void run() throws Exception {",
			"        // long start_time = System.nanoTime();",
			"",
			"        try {",
			"            fr = new FastReader(\"${4:in0}.txt\");",
			"            out = new PrintWriter(\"${5:out0}.txt\");",
			"        } catch (Exception e) {",
			"            fr = new FastReader();",
			"            out = new PrintWriter(System.out);",
			"        }",
			"        pre();",
			"        StringBuilder print = new StringBuilder(\"\");",
			"",
			"        int T = (multipleTC) ? fr.ni() : 1;",
			"        for (int t = 1; t <= T; t++) {",
			"            TestCase = t;",
			"            print.append(solve()).append(\"\\n\");",
			"        }",
			"",
			"        p(print);",
			"        // long end_time = System.nanoTime();",
			"        // System.out.printf(\"Running Time in sec : %2.10f\", (double) (end_time -",
			"        // start_time) * (double) 1e-9);",
			"",
			"        out.flush();",
			"        out.close();",
			"    }",
			"",
			"    static void p(Object o) {",
			"        out.print(o);",
			"    }",
			"",
			"    static void pln(Object o) {",
			"        out.println(o);",
			"    }",
			"",
			"    static void psp(Object o) {",
			"        out.print(o + \" \");",
			"    }",
			"",
			"    static void pnf(Object o) {",
			"        out.println(o);",
			"        out.flush();",
			"    }",
			"",
			"    static void deb(Object... x) {",
			"        System.out.print(\"#\" + TestCase + \" = \");",
			"        for (int i = 0; i < x.length - 1; i++)",
			"            System.out.print(x[i] + \" , \");",
			"        System.out.println(x[x.length - 1]);",
			"",
			"    }",
			"",
			"    static void in(int a) throws Exception {",
			"        a = fr.ni();",
			"    }",
			"",
			"    static void in(long a) throws Exception {",
			"        a = fr.ni();",
			"    }",
			"",
			"    static void in(String[] a) throws Exception {",
			"        a = fr.nln().trim().split(\" \");",
			"    }",
			"",
			"    static void in(String a) throws Exception {",
			"        a = fr.next();",
			"    }",
			"",
			"    static void in(int a[]) throws Exception {",
			"        for (int i = 0; i < a.length; i++) {",
			"            a[i] = fr.ni();",
			"        }",
			"    }",
			"",
			"    static void in(long a[]) throws Exception {",
			"        for (int i = 0; i < a.length; i++) {",
			"            a[i] = fr.nl();",
			"        }",
			"    }",
			"",
			"    static void in(int a[][]) throws Exception {",
			"        for (int i = 0; i < a.length; i++) {",
			"            for (int j = 0; j < a[0].length; j++) {",
			"                a[i][j] = fr.ni();",
			"            }",
			"        }",
			"    }",
			"",
			"    class FastReader {",
			"        BufferedReader br;",
			"        StringTokenizer st;",
			"",
			"        public FastReader() {",
			"            br = new BufferedReader(new InputStreamReader(System.in));",
			"        }",
			"",
			"        public FastReader(String s) throws Exception {",
			"            br = new BufferedReader(new FileReader(s));",
			"        }",
			"",
			"        String next() throws Exception {",
			"            while (st == null || !st.hasMoreElements()) {",
			"                try {",
			"                    st = new StringTokenizer(br.readLine());",
			"                } catch (IOException e) {",
			"                    throw new Exception(e.toString());",
			"                }",
			"            }",
			"            return st.nextToken();",
			"        }",
			"",
			"        String nextLine() throws Exception {",
			"            String str = \"\";",
			"            try {",
			"                str = br.readLine();",
			"            } catch (IOException e) {",
			"                throw new Exception(e.toString());",
			"            }",
			"            return str;",
			"        }",
			"",
			"        String n() throws Exception {",
			"            return fr.next();",
			"        }",
			"",
			"        String nln() throws Exception {",
			"            return fr.nextLine().trim();",
			"        }",
			"",
			"        int ni() throws Exception {",
			"            return Integer.parseInt(fr.next());",
			"        }",
			"",
			"        long nl() throws Exception {",
			"            return Long.parseLong(fr.next());",
			"        }",
			"",
			"        double nd() throws Exception {",
			"            return Double.parseDouble(fr.next());",
			"        }",
			"",
			"        int[] nextIntArray(int n) throws Exception {",
			"            int[] a = new int[n];",
			"            for (int i = 0; i < n; i++) {",
			"                a[i] = fr.ni();",
			"            }",
			"            return a;",
			"        }",
			"",
			"        long[] nextLongArray(int n) throws Exception {",
			"            long[] a = new long[n];",
			"            for (int i = 0; i < n; i++) {",
			"                a[i] = fr.nl();",
			"            }",
			"            return a;",
			"        }",
			"    }",
			"}"
		],
		"description": "Template"
	},
	"for loop": {
		"prefix": "fo",
		"body": [
			"for(int i=0;i<${1:n};i++){",
			"",
			"}"
		],
		"description": "for loop"
	},
	"ParseInt": {
		"prefix": "parseInt",
		"body": [
			"Integer.parseInt(${1:});"
		],
		"description": "ParseInt"
	},
	"Pair": {
		"prefix": "pair",
		"body": [
			" class Pair<S extends Comparable<S>, T extends Comparable<T>> implements Comparable<Pair<S, T>> {",
			"        S first;",
			"        T second;",
			"        ",
			"        Pair(S f, T s) {",
			"            first = f;",
			"            second = s;",
			"        }",
			"    ",
			"        @Override",
			"        public int compareTo(Pair<S, T> o) {",
			"            int t = first.compareTo(o.first);",
			"           if (t == 0) return second.compareTo(o.second);",
			"            return t;",
			"        }",
			"        ",
			"        @Override",
			"        public int hashCode() {",
			"            return (31 + first.hashCode()) * 31 + second.hashCode();",
			"        }",
			"        ",
			"        @Override",
			"        public boolean equals(Object o) {",
			"            if (!(o instanceof Pair)) return false;",
			"            if (o == this) return true;",
			"            Pair p = (Pair) o;",
			"            return first.equals(p.first) && second.equals(p.second);",
			"        }",
			"        ",
			"        @Override",
			"        public String toString() {",
			"            return \"Pair{\" + first + \", \" + second + \"}\";",
			"        }",
			"    }"
		],
		"description": "Pair"
	},
	"fastestReader": {
		"prefix": "fastestreader",
		"body": [
			"",
			"    class FastReader {",
			"        final private int BUFFER_SIZE = 1 << 16;",
			"        private DataInputStream din;",
			"        private byte[] buffer;",
			"        private int bufferPointer, bytesRead;",
			"",
			"        public FastReader() {",
			"            din = new DataInputStream(System.in);",
			"            buffer = new byte[BUFFER_SIZE];",
			"            bufferPointer = bytesRead = 0;",
			"        }",
			"",
			"        public FastReader(String file_name) throws IOException {",
			"            din = new DataInputStream(new FileInputStream(file_name));",
			"            buffer = new byte[BUFFER_SIZE];",
			"            bufferPointer = bytesRead = 0;",
			"        }",
			"",
			"        public String next() throws IOException {",
			"            byte[] buf = new byte[64]; // line length",
			"            int cnt = 0, c;",
			"            while ((c = read()) != -1) {",
			"                if (c == ' ')",
			"                    break;",
			"                buf[cnt++] = (byte) c;",
			"            }",
			"            return new String(buf, 0, cnt);",
			"        }",
			"",
			"        public String readLine() throws IOException {",
			"            byte[] buf = new byte[64]; // line length",
			"            int cnt = 0, c;",
			"            while ((c = read()) != -1) {",
			"                if (c == '\\n')",
			"                    break;",
			"                buf[cnt++] = (byte) c;",
			"            }",
			"            return new String(buf, 0, cnt);",
			"        }",
			"",
			"        public int nextInt() throws IOException {",
			"            int ret = 0;",
			"            byte c = read();",
			"            while (c <= ' ')",
			"                c = read();",
			"            boolean neg = (c == '-');",
			"            if (neg)",
			"                c = read();",
			"            do {",
			"                ret = ret * 10 + c - '0';",
			"            } while ((c = read()) >= '0' && c <= '9');",
			"",
			"            if (neg)",
			"                return -ret;",
			"            return ret;",
			"        }",
			"",
			"        public long nextLong() throws IOException {",
			"            long ret = 0;",
			"            byte c = read();",
			"            while (c <= ' ')",
			"                c = read();",
			"            boolean neg = (c == '-');",
			"            if (neg)",
			"                c = read();",
			"            do {",
			"                ret = ret * 10 + c - '0';",
			"            } while ((c = read()) >= '0' && c <= '9');",
			"            if (neg)",
			"                return -ret;",
			"            return ret;",
			"        }",
			"",
			"        public double nextDouble() throws IOException {",
			"            double ret = 0, div = 1;",
			"            byte c = read();",
			"            while (c <= ' ')",
			"                c = read();",
			"            boolean neg = (c == '-');",
			"            if (neg)",
			"                c = read();",
			"",
			"            do {",
			"                ret = ret * 10 + c - '0';",
			"            } while ((c = read()) >= '0' && c <= '9');",
			"",
			"            if (c == '.') {",
			"                while ((c = read()) >= '0' && c <= '9') {",
			"                    ret += (c - '0') / (div *= 10);",
			"                }",
			"            }",
			"",
			"            if (neg)",
			"                return -ret;",
			"            return ret;",
			"        }",
			"",
			"        private void fillBuffer() throws IOException {",
			"            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);",
			"            if (bytesRead == -1)",
			"                buffer[0] = -1;",
			"        }",
			"",
			"        private byte read() throws IOException {",
			"            if (bufferPointer == bytesRead)",
			"                fillBuffer();",
			"            return buffer[bufferPointer++];",
			"        }",
			"",
			"        public void close() throws IOException {",
			"            if (din == null)",
			"                return;",
			"            din.close();",
			"        }",
			"",
			"        String n() throws Exception {",
			"            return fr.next();",
			"        }",
			"",
			"        String nln() throws Exception {",
			"            return fr.readLine().trim();",
			"        }",
			"",
			"        int ni() throws Exception {",
			"            return fr.nextInt();",
			"        }",
			"",
			"        long nl() throws Exception {",
			"            return fr.nextLong();",
			"        }",
			"",
			"        double nd() throws Exception {",
			"            return fr.nextDouble();",
			"        }",
			"",
			"        int[] nextIntArray(int n) throws Exception {",
			"            int[] a = new int[n];",
			"            for (int i = 0; i < n; i++) {",
			"                a[i] = fr.nextInt();",
			"            }",
			"            return a;",
			"        }",
			"",
			"        long[] nextLongArray(int n) throws Exception {",
			"            long[] a = new long[n];",
			"            for (int i = 0; i < n; i++) {",
			"                a[i] = fr.nextLong();",
			"            }",
			"            return a;",
			"        }",
			"    }",
			"",
			"}",
			""
		],
		"description": "fastestReader"
	},
	"FastReader": {
		"prefix": "fastreader",
		"body": [
			"",
			"    class FastReader {",
			"        BufferedReader br;",
			"        StringTokenizer st;",
			"",
			"        public FastReader() {",
			"            br = new BufferedReader(new InputStreamReader(System.in));",
			"        }",
			"",
			"        public FastReader(String s) throws Exception {",
			"            br = new BufferedReader(new FileReader(s));",
			"        }",
			"",
			"        String next() throws Exception {",
			"            while (st == null || !st.hasMoreElements()) {",
			"                try {",
			"                    st = new StringTokenizer(br.readLine());",
			"                } catch (IOException e) {",
			"                    throw new Exception(e.toString());",
			"                }",
			"            }",
			"            return st.nextToken();",
			"        }",
			"",
			"        String nextLine() throws Exception {",
			"            String str = \"\";",
			"            try {",
			"                str = br.readLine();",
			"            } catch (IOException e) {",
			"                throw new Exception(e.toString());",
			"            }",
			"            return str;",
			"        }",
			"",
			"        String n() throws Exception {",
			"            return fr.next();",
			"        }",
			"",
			"        String nln() throws Exception {",
			"            return fr.nextLine().trim();",
			"        }",
			"",
			"        int ni() throws Exception {",
			"            return Integer.parseInt(fr.next());",
			"        }",
			"",
			"        long nl() throws Exception {",
			"            return Long.parseLong(fr.next());",
			"        }",
			"",
			"        double nd() throws Exception {",
			"            return Double.parseDouble(fr.next());",
			"        }",
			"",
			"        int[] nextIntArray(int n) throws Exception {",
			"            int[] a = new int[n];",
			"            for (int i = 0; i < n; i++) {",
			"                a[i] = fr.ni();",
			"            }",
			"            return a;",
			"        }",
			"",
			"        long[] nextLongArray(int n) throws Exception {",
			"            long[] a = new long[n];",
			"            for (int i = 0; i < n; i++) {",
			"                a[i] = fr.nl();",
			"            }",
			"            return a;",
			"        }",
			"    }",
			"}"
		],
		"description": "FastReader"
	},
	"SieveOfEratosthenes": {
		"prefix": "SieveOfEratosthenes",
		"body": [
			"private ArrayList<Integer> sieveOfEratosthenes(int n, ArrayList<Integer> arrayOfPrimes) {",
		  "		boolean helper[] = new boolean[n + 1];",
		  "		arrayOfPrimes.add(2);",
		  "		for (int i = 3; i <= n; i += 2)",
		  "			helper[i] = true;",
			"",
		  "		for (int i = 3; i <= n; i += 2) {",
		  "			if (helper[i]) {",
		  "				// arrayOfPrimes.add(i);",
		  "				for (int j = i * i; j <= n; j += i)",
		  "					helper[j] = false;",
		  "			}",
		  "		}",
		  "		for (int i = 3; i <= n; i += 2)",
		  "			if (helper[i])",
		  "				arrayOfPrimes.add(i);",
			"",
		  "		return arrayOfPrimes;",
		  "	}"
		],
		"description": "SieveOfEratosthenes"
	},
	"SieveSegmentedByBlock": {
		"prefix": "SieveSegmented",
		"body": [
			"final static int N = (int) 1e8;",
		  "	final static int block_size = (int) 1e4;",
		  "	StringBuilder primes = new StringBuilder((int) 1e8);",
			"",
		  "	private ArrayList<Integer> sieveOfEratosthenes(int n, ArrayList<Integer> arrayOfPrimes) {",
		  "		boolean helper[] = new boolean[n + 1];",
		  "		arrayOfPrimes.add(2);",
		  "		for (int i = 3; i <= n; i += 2)",
		  "			helper[i] = true;",
			"",
		  "		for (int i = 3; i <= n; i += 2) {",
		  "			if (helper[i]) {",
		  "				// arrayOfPrimes.add(i);",
		  "				for (int j = i * i; j <= n; j += i)",
		  "					helper[j] = false;",
		  "			}",
		  "		}",
		  "		for (int i = 3; i <= n; i += 2)",
		  "			if (helper[i])",
		  "				arrayOfPrimes.add(i);",
			"",
		  "		return arrayOfPrimes;",
		  "	}",
			"",
		  "	private String segmentedSieve() throws Exception {",
		  "		// int n=ni();",
			"",
		  "		int nsqrt = (int) Math.sqrt(N);",
			"",
		  "		ArrayList<Integer> prime_sqrt = new ArrayList<>();",
			"",
		  "		sieveOfEratosthenes(nsqrt, prime_sqrt);",
			"",
		  "		int count = 0;",
		  "		boolean[] block = new boolean[block_size];",
			"",
		  "		for (int i = 0; i * block_size <= N; i++) {",
		  "			Arrays.fill(block, true);",
		  "			int start = i * block_size;",
		  "			for (int p : prime_sqrt) {",
		  "				int start_indx = (start + p - 1) / p;",
		  "				int j = Math.max(start_indx, p) * p - start;",
		  "				for (; j < block_size; j += p)",
		  "					block[j] = false;",
		  "			}",
		  "			if (i == 0)",
		  "				block[0] = block[1] = false;",
		  "			for (int k = 0; k < block_size && start + k <= N; k++) {",
		  "				if (block[k]) {",
		  "					count++;",
			"",
		  "					primes.append((start + k) + \"\");",
		  "				}",
		  "			}",
			"",
		  "		}",
		  "		//to count bw L-R blok size==L-R",
		  "		// return no of primes and builds primes stringbulder till N using segments",
		  "		return \"\" + count;",
		  "	}"
		],
		"description": "SieveSegmentedByBlock"
	}
}