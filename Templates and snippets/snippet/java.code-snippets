{
	"Template Java": {
		"prefix": "temp",
		"body": [
		  "import java.util.*;",
		  "import java.io.*;",
		  "import java.text.*;",
		  "public class Main{",
		  "    ",
		  "    //make it false if Multiple test case is not in the question",
		  "    static boolean multipleTC = true;",
		  "    ",
		  "    //for pre processing if needed",
		  "    void pre() throws Exception",
		  "    {}",
		  "        public static void main(String[] args) throws Exception{",
		  "        new Main().run();",
		  "      }",
		  "      ",
		  "",
		  "      //code here",
		  "   public String solve(){",
		  "       return \"Yes\";",
		  "",
		  "    }  ",
		  "      ",
		  "",
		  "    // input output handled here",
		  "    private String in_out(int tc) throws Exception{",
		  "         ${1: //take input here}",
		  "",		
		  "        return solve();",
		  "",
		  "    }",
		  "    ",
		  "",
		  "    ",
		  "",
		  "    ",
		  "    ",
		  "    void run() throws Exception{",
		  "        in = new FastReader(\"input.txt\");  out = new PrintWriter(\"output.txt\");",
		  "        // in = new FastReader(); out = new PrintWriter(System.out);",
		  "        ",
		  "        final StringBuilder print=new StringBuilder(\"\");",
		  "        pre();",
		  "        int T = (multipleTC)?ni():1;",
		  "        for(int t = 1; t<= T; t++){",
		  "        print.append(in_out(t)).append(\"\\n\");",
		  "        }",
		  "",
		  "        p(print);",
		  "        ",
		  "        ",
		  "        out.flush();",
		  "        out.close();",
		  "    }",
		  "    ",
		  "    PrintWriter out;",
		  "    FastReader in;",
		  "    ",
		  "        void p(Object o)",
		  "            {out.print(o);}",
		  "        void pln(Object o)",
		  "            {out.println(o);}",
		  "        void pnf(Object o)",
		  "            {out.println(o);",
		  "            out.flush();}",
		  "    ",
		  "        String n()throws Exception",
		  "            {return in.next();}",
		  "    ",
		  "        String nln()throws Exception",
		  "            {return in.nextLine();}",
		  "    ",
		  "        int ni()throws Exception",
		  "            {return Integer.parseInt(in.next());}",
		  "    ",
		  "        long nl()throws Exception",
		  "            {return Long.parseLong(in.next());}",
		  "    ",
		  "        double nd()throws Exception",
		  "            {return Double.parseDouble(in.next());}",
		  "",
		  "    class FastReader{",
		  "        BufferedReader br;",
		  "        StringTokenizer st;",
		  "        ",
		  "        public FastReader(){",
		  "            br = new BufferedReader(new InputStreamReader(System.in));",
		  "        }",
		  "",
		  "        public FastReader(String s) throws Exception{",
		  "            br = new BufferedReader(new FileReader(s));",
		  "        }",
		  "",
		  "        String next() throws Exception{",
		  "            while (st == null || !st.hasMoreElements()){",
		  "                try{",
		  "                    st = new StringTokenizer(br.readLine());",
		  "                }catch (IOException  e){",
		  "                    throw new Exception(e.toString());",
		  "                }",
		  "            }",
		  "            return st.nextToken();",
		  "        }",
		  "",
		  "        String nextLine() throws Exception{",
		  "            String str = \"\";",
		  "            try{   ",
		  "                str = br.readLine();",
		  "            }catch (IOException e){",
		  "                throw new Exception(e.toString());",
		  "            }  ",
		  "            return str;",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Template Java"
	  },
		"for loop": {
			"prefix": "fo",
			"body": [
			  "for(int i=0;i<${1:n};i++){",
			  "",
			  "}"
			],
			"description": "for loop"
		  },
		  "ParseInt": {
			"prefix": "parseInt",
			"body": [
			  "Integer.parseInt(${1:});"
			],
			"description": "ParseInt"
		  }
	
	}