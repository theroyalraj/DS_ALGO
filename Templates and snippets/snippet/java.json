{
	"StringBuilder sb": {
		"prefix": "sb",
		"body": [
			"StringBuilder sb=new StringBuilder(\"\");",
		]
	},
	"Template": {
		"prefix": "temp",
		"body": [
			"import java.util.*;",
			"import java.io.*;",
			"",
			"public class Main {",
			"",
		  "	// make it false if Multiple test case is not in the question",
		  "	static boolean multipleTC = true;",
		  "	int TestCase = 1;",
			"",
		  "	// for pre processing if needed",
		  "	void pre() throws Exception {",
		  "	}",
			"",
		  "	public static void main(String[] args) throws Exception {",
			"",
		  "		new Main().run();",
		  "	}",
			"",
		  "	// input output handled here",
		  "	private String solve(int tc) throws Exception {",
		  "		${1:// code}",
			"",
		  "		return \"\";",
		  "	}",
			"",
		  "	void run() throws Exception {",
		  "		// long start_time = System.nanoTime();",
			"",
		  "		try {",
		  "			in = new FastReader(\"in0.txt\");",
		  "			out = new PrintWriter(\"out0.txt\");",
		  "		} catch (Exception e) {",
		  "			in = new FastReader();",
		  "			out = new PrintWriter(System.out);",
		  "		}",
			"",
		  "		StringBuilder print = new StringBuilder(\"\");",
		  "		pre();",
		  "		int T = (multipleTC) ? ni() : 1;",
		  "		for (int t = 1; t <= T; t++) {",
		  "			this.TestCase = t;",
		  "			print.append(solve(t)).append(\"\\n\");",
		  "		}",
			"",
		  "		p(print);",
		  "		// long end_time = System.nanoTime();",
		  "		// System.out.printf(\"Running Time in sec : %2.10f\", (double) (end_time -",
		  "		// start_time) * (double) 1e-9);",
			"",
		  "		out.flush();",
		  "		out.close();",
		  "	}",
			"",
		  "	PrintWriter out;",
		  "	FastReader in;",
			"",
		  "	void p(Object o) {",
		  "		out.print(o);",
		  "	}",
			"",
		  "	void pln(Object o) {",
		  "		out.println(o);",
		  "	}",
			"",
		  "	void pnf(Object o) {",
		  "		out.println(o);",
		  "		out.flush();",
		  "	}",
			"",
		  "	void deb(Object x) {",
		  "		pln(\"#\" + TestCase + \" = \" + x);",
		  "	}",
			"",
		  "	void deb2(Object x, Object y) {",
		  "		pln(\"#\" + TestCase + \" = \" + x + \" , \" + y);",
		  "	}",
			"",
		  "	String n() throws Exception {",
		  "		return in.next();",
		  "	}",
			"",
		  "	String nln() throws Exception {",
		  "		return in.nextLine();",
		  "	}",
			"",
		  "	int ni() throws Exception {",
		  "		return Integer.parseInt(in.next());",
		  "	}",
			"",
		  "	long nl() throws Exception {",
		  "		return Long.parseLong(in.next());",
		  "	}",
			"",
		  "	double nd() throws Exception {",
		  "		return Double.parseDouble(in.next());",
		  "	}",
			"",
		  "	class FastReader {",
		  "		BufferedReader br;",
		  "		StringTokenizer st;",
			"",
		  "		public FastReader() {",
		  "			br = new BufferedReader(new InputStreamReader(System.in));",
		  "		}",
			"",
		  "		public FastReader(String s) throws Exception {",
		  "			br = new BufferedReader(new FileReader(s));",
		  "		}",
			"",
		  "		String next() throws Exception {",
		  "			while (st == null || !st.hasMoreElements()) {",
		  "				try {",
		  "					st = new StringTokenizer(br.readLine());",
		  "				} catch (IOException e) {",
		  "					throw new Exception(e.toString());",
		  "				}",
		  "			}",
		  "			return st.nextToken();",
		  "		}",
			"",
		  "		String nextLine() throws Exception {",
		  "			String str = \"\";",
		  "			try {",
		  "				str = br.readLine();",
		  "			} catch (IOException e) {",
		  "				throw new Exception(e.toString());",
		  "			}",
		  "			return str;",
		  "		}",
		  "	}",
			"}"
		],
		"description": "Template"
	},
	"for loop": {
		"prefix": "fo",
		"body": [
			"for(int i=0;i<${1:n};i++){",
			"",
			"}"
		],
		"description": "for loop"
	},
	"ParseInt": {
		"prefix": "parseInt",
		"body": [
			"Integer.parseInt(${1:});"
		],
		"description": "ParseInt"
	},
	"Pair": {
		"prefix": "pair",
		"body": [
			" class Pair<S extends Comparable<S>, T extends Comparable<T>> implements Comparable<Pair<S, T>> {",
			"        S first;",
			"        T second;",
			"        ",
			"        Pair(S f, T s) {",
			"            first = f;",
			"            second = s;",
			"        }",
			"    ",
			"        @Override",
			"        public int compareTo(Pair<S, T> o) {",
			"            int t = first.compareTo(o.first);",
			"            if (t == 0) return second.compareTo(o.second);",
			"            return t;",
			"        }",
			"        ",
			"        @Override",
			"        public int hashCode() {",
			"            return (31 + first.hashCode()) * 31 + second.hashCode();",
			"        }",
			"        ",
			"        @Override",
			"        public boolean equals(Object o) {",
			"            if (!(o instanceof Pair)) return false;",
			"            if (o == this) return true;",
			"            Pair p = (Pair) o;",
			"            return first.equals(p.first) && second.equals(p.second);",
			"        }",
			"        ",
			"        @Override",
			"        public String toString() {",
			"            return \"Pair{\" + first + \", \" + second + \"}\";",
			"        }",
			"    }"
		],
		"description": "Pair"
	},
	"Fastest Reader": {
		"prefix": "fastestRead",
		"body": [
			"PrintWriter out;",
			"    FastReader in;",
			"    ",
			"        void p(Object o)",
			"            {out.print(o);}",
			"        void pln(Object o)",
			"            {out.println(o);}",
			"        void pnf(Object o)",
			"            {out.println(o);",
			"            out.flush();}",
			"    ",
			"        String n()throws Exception",
			"            {return in.readLine();}",
			"    ",
			"        String nln()throws Exception",
			"            {return in.readLine();}",
			"    ",
			"        int ni()throws Exception",
			"            {return (in.nextInt());}",
			"    ",
			"        long nl()throws Exception",
			"            {return in.nextLong();}",
			"    ",
			"        double nd()throws Exception",
			"            {return in.nextDouble();}",
			"",
			"            static class FastReader ",
			"            { ",
			"                final private int BUFFER_SIZE = 1 << 16; ",
			"                private DataInputStream din; ",
			"                private byte[] buffer; ",
			"                private int bufferPointer, bytesRead; ",
			"          ",
			"                public FastReader() ",
			"                { ",
			"                    din = new DataInputStream(System.in); ",
			"                    buffer = new byte[BUFFER_SIZE]; ",
			"                    bufferPointer = bytesRead = 0; ",
			"                } ",
			"          ",
			"                public FastReader(String file_name) throws IOException ",
			"                { ",
			"                    din = new DataInputStream(new FileInputStream(file_name)); ",
			"                    buffer = new byte[BUFFER_SIZE]; ",
			"                    bufferPointer = bytesRead = 0; ",
			"                } ",
			"          ",
			"                public String readLine() throws IOException ",
			"                { ",
			"                    byte[] buf = new byte[64]; // line length ",
			"                    int cnt = 0, c; ",
			"                    while ((c = read()) != -1) ",
			"                    { ",
			"                        if (c == '\\n') ",
			"                            break; ",
			"                        buf[cnt++] = (byte) c; ",
			"                    } ",
			"                    return new String(buf, 0, cnt); ",
			"                } ",
			"          ",
			"                public int nextInt() throws IOException ",
			"                { ",
			"                    int ret = 0; ",
			"                    byte c = read(); ",
			"                    while (c <= ' ') ",
			"                        c = read(); ",
			"                    boolean neg = (c == '-'); ",
			"                    if (neg) ",
			"                        c = read(); ",
			"                    do",
			"                    { ",
			"                        ret = ret * 10 + c - '0'; ",
			"                    }  while ((c = read()) >= '0' && c <= '9'); ",
			"          ",
			"                    if (neg) ",
			"                        return -ret; ",
			"                    return ret; ",
			"                } ",
			"          ",
			"                public long nextLong() throws IOException ",
			"                { ",
			"                    long ret = 0; ",
			"                    byte c = read(); ",
			"                    while (c <= ' ') ",
			"                        c = read(); ",
			"                    boolean neg = (c == '-'); ",
			"                    if (neg) ",
			"                        c = read(); ",
			"                    do { ",
			"                        ret = ret * 10 + c - '0'; ",
			"                    } ",
			"                    while ((c = read()) >= '0' && c <= '9'); ",
			"                    if (neg) ",
			"                        return -ret; ",
			"                    return ret; ",
			"                } ",
			"          ",
			"                public double nextDouble() throws IOException ",
			"                { ",
			"                    double ret = 0, div = 1; ",
			"                    byte c = read(); ",
			"                    while (c <= ' ') ",
			"                        c = read(); ",
			"                    boolean neg = (c == '-'); ",
			"                    if (neg) ",
			"                        c = read(); ",
			"          ",
			"                    do { ",
			"                        ret = ret * 10 + c - '0'; ",
			"                    } ",
			"                    while ((c = read()) >= '0' && c <= '9'); ",
			"          ",
			"                    if (c == '.') ",
			"                    { ",
			"                        while ((c = read()) >= '0' && c <= '9') ",
			"                        { ",
			"                            ret += (c - '0') / (div *= 10); ",
			"                        } ",
			"                    } ",
			"          ",
			"                    if (neg) ",
			"                        return -ret; ",
			"                    return ret; ",
			"                } ",
			"          ",
			"                private void fillBuffer() throws IOException ",
			"                { ",
			"                    bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); ",
			"                    if (bytesRead == -1) ",
			"                        buffer[0] = -1; ",
			"                } ",
			"          ",
			"                private byte read() throws IOException ",
			"                { ",
			"                    if (bufferPointer == bytesRead) ",
			"                        fillBuffer(); ",
			"                    return buffer[bufferPointer++]; ",
			"                } ",
			"          ",
			"                public void close() throws IOException ",
			"                { ",
			"                    if (din == null) ",
			"                        return; ",
			"                    din.close(); ",
			"                } ",
			"            } "
		],
		"description": "Fastest Reader"
	},
	"FastReader": {
		"prefix": "fastreader",
		"body": [
			"PrintWriter out;",
			"    FastReader in;",
			"    ",
			"        void p(Object o)",
			"            {out.print(o);}",
			"        void pln(Object o)",
			"            {out.println(o);}",
			"        void pnf(Object o)",
			"            {out.println(o);",
			"            out.flush();}",
			"    ",
			"        String n()throws Exception",
			"            {return in.next();}",
			"    ",
			"        String nln()throws Exception",
			"            {return in.nextLine();}",
			"    ",
			"        int ni()throws Exception",
			"            {return Integer.parseInt(in.next());}",
			"    ",
			"        long nl()throws Exception",
			"            {return Long.parseLong(in.next());}",
			"    ",
			"        double nd()throws Exception",
			"            {return Double.parseDouble(in.next());}",
			"",
			"    class FastReader{",
			"        BufferedReader br;",
			"        StringTokenizer st;",
			"        ",
			"        public FastReader(){",
			"            br = new BufferedReader(new InputStreamReader(System.in));",
			"        }",
			"",
			"        public FastReader(String s) throws Exception{",
			"            br = new BufferedReader(new FileReader(s));",
			"        }",
			"",
			"        String next() throws Exception{",
			"            while (st == null || !st.hasMoreElements()){",
			"                try{",
			"                    st = new StringTokenizer(br.readLine());",
			"                }catch (IOException  e){",
			"                    throw new Exception(e.toString());",
			"                }",
			"            }",
			"            return st.nextToken();",
			"        }",
			"",
			"        String nextLine() throws Exception{",
			"            String str = \"\";",
			"            try{   ",
			"                str = br.readLine();",
			"            }catch (IOException e){",
			"                throw new Exception(e.toString());",
			"            }  ",
			"            return str;",
			"        }",
			"    }"
		],
		"description": "FastReader"
	}
}